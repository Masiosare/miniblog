<?php

namespace BaseLine\Bundle\MiniBlogBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Comment
 *
 * @ORM\Table(name="comment")
 * @ORM\Entity(repositoryClass="BaseLine\Bundle\MiniBlogBundle\Repository\CommentRepository")
 * @ORM\HasLifecycleCallbacks
 */
class Comment
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="content", type="string", length=255)
     */
    private $content;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="createdAt", type="datetime")
     */
    private $createdAt;

    /**
     * @ORM\ManyToOne(targetEntity="Minipost", inversedBy="comments")
     * @ORM\JoinColumn(name="minipost_id", referencedColumnName="id")
     */
    protected $minipost;
    
    /**
     * @ORM\ManyToOne(targetEntity="User", inversedBy="comments")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    protected $user;
    
    /**
     * @ORM\ManyToOne(targetEntity="Comment", inversedBy="nestedComments")
     * @ORM\JoinColumn(name="comment_id", referencedColumnName="id")
     */
    protected $comment;
            
    /**
     * @ORM\OneToMany(targetEntity="Comment", mappedBy="comment")
     */
    protected $nestedComments;

    public function __construct()
    {
        $this->nestedComments = new ArrayCollection();
    }
  
    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set content
     *
     * @param string $content
     *
     * @return Comment
     */
    public function setContent($content)
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Get content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     *
     * @return Comment
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set minipost
     *
     * @param \BaseLine\Bundle\MiniBlogBundle\Entity\Minipost $minipost
     *
     * @return Comment
     */
    public function setMinipost(\BaseLine\Bundle\MiniBlogBundle\Entity\Minipost $minipost = null)
    {
        $this->minipost = $minipost;

        return $this;
    }

    /**
     * Get minipost
     *
     * @return \BaseLine\Bundle\MiniBlogBundle\Entity\Minipost
     */
    public function getMinipost()
    {
        return $this->minipost;
    }
    /**
     *
     * @ORM\PrePersist
     * @ORM\PreUpdate
     */
    public function updatedTimestamps()
    {
       if ($this->getCreatedAt() == null) {
           $this->setCreatedAt(new \DateTime('now'));
       }
    }

    /**
     * Set user
     *
     * @param \BaseLine\Bundle\MiniBlogBundle\Entity\User $user
     *
     * @return Comment
     */
    public function setUser(\BaseLine\Bundle\MiniBlogBundle\Entity\User $user = null)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \BaseLine\Bundle\MiniBlogBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }
}
